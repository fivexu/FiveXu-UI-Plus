{"version":3,"sources":["webpack:///./src/views/confirm/confirm.vue?d2ea","webpack:///./src/views/confirm/confirm.vue","webpack:///./src/views/confirm/confirm.vue?fc96","webpack:///./src/views/confirm/confirm.vue?f644","webpack:///./src/assets/menuList.ts"],"names":["class","title","hide","base","baseConfirm","before","beforeConfirm","option","optionBtnConfirm","optionCloseConfirm","test","Promise","resolve","setTimeout","Math","random","name","setup","then","success","catch","warning","content","beforeClose","action","app","next","setDefineLoading","setCancelLoading","cancelText","defineText","roundButton","closeOnEscape","closeOnModal","render","__scopeId","router","defaultContent","defaultList","value","role","label","disabled"],"mappings":"2GAAA,W,gJCCOA,MAAM,W,iBAEyB,U,EAEN,eAAa,qB,iBAIL,S,EAEN,eAAa,qB,iBAIJ,S,iBACE,gB,EAEX,eAAa,qB,iKAjB7C,eAoBM,MApBN,EAoBM,CAnBJ,eAKU,GALDC,MAAM,QAAM,CAERC,KAAI,EACb,IAA2C,C,eAA3C,eAA2C,YAAnB,G,SAAN,EAAAC,U,UAFpB,IAAkD,CAAlD,eAAkD,GAAtC,QAAO,EAAAC,aAAW,C,UAAE,IAAM,C,gCAKxC,eAKU,GALDH,MAAM,SAAO,CAETC,KAAI,EACb,IAA6C,C,eAA7C,eAA6C,YAAnB,G,SAAR,EAAAG,Y,UAFpB,IAAmD,CAAnD,eAAmD,GAAvC,QAAO,EAAAC,eAAa,C,UAAE,IAAK,C,gCAKzC,eAMU,GANDL,MAAM,OAAK,CAGPC,KAAI,EACb,IAA6C,C,eAA7C,eAA6C,YAAnB,G,SAAR,EAAAK,Y,UAHpB,IAAsD,CAAtD,eAAsD,GAA1C,QAAO,EAAAC,kBAAgB,C,UAAE,IAAK,C,wBAC1C,eAA+D,GAAnD,QAAO,EAAAC,oBAAkB,C,UAAE,IAAY,C,4ECXnDC,EAAO,WAAuB,WAAIC,SAAQ,SAAAC,GAAW,OAAAC,YAAW,WAAM,OAAAD,EAAQE,KAAKC,YAAW,SAErF,iBAAgB,CAC7BC,KAAM,cACNC,MAAA,sBACQb,EAAc,WAClB,eAAU,OAAgB,SAASc,MAAK,WACtC,OAAUC,QAAQ,SACjBC,OAAM,WACP,OAAUC,QAAQ,UAGhBf,EAAgB,WACpB,eAAU,CACRgB,QAAS,OACTrB,MAAO,QACPsB,YAAa,SAAOC,EAAQC,EAAKC,GAAI,kD,4EACnC,OAAUP,QAAQ,UAAUK,GACb,WAAXA,EAAA,OACFC,EAAIE,kBAAiB,GACN,GAAMjB,M,cAAfK,EAAS,SACfU,EAAIE,kBAAiB,GACjBZ,EAAS,GACX,OAAUM,QAAQ,SAElBK,I,aAEkB,WAAXF,GACTC,EAAIG,kBAAiB,GACrBf,YAAW,WACTa,MACC,MAEHA,I,qCAGHR,MAAK,WACN,OAAUC,QAAQ,SACjBC,OAAM,SAAAI,GACP,OAAUH,QAAQG,OAGhBhB,EAAmB,WACvB,eAAU,CACRc,QAAS,QACTrB,MAAO,QACP4B,WAAY,KACZC,WAAY,KACZC,aAAa,IACZb,MAAK,WACN,OAAUC,QAAQ,SACjBC,OAAM,SAAAI,GACP,OAAUH,QAAQG,OAGhBf,EAAqB,WACzB,eAAU,CACRa,QAAS,QACTrB,MAAO,QACP+B,eAAe,EACfC,cAAc,IACbf,MAAK,WACN,OAAUC,QAAQ,SACjBC,OAAM,SAAAI,GACP,OAAUH,QAAQG,OAIhBrB,EAAO,4TAcPE,EAAS,ulCAqCTE,EAAS,y3BAiCf,MAAO,CACLJ,KAAI,EACJE,OAAM,EACNE,OAAM,EACND,cAAa,EACbE,iBAAgB,EAChBC,mBAAkB,EAClBL,YAAW,M,UC/JjB,EAAO8B,OAASA,EAChB,EAAOC,UAAY,kBAEJ,gB,oCCGf,oEAAe,QACb,CAAEnB,KAAM,KAAMoB,OAAQ,kBACtB,CAAEpB,KAAM,OAAQoB,OAAQ,gBACxB,CAAEpB,KAAM,MAAOoB,OAAQ,iBACvB,CAAEpB,KAAM,MAAOoB,OAAQ,oBACvB,CAAEpB,KAAM,MAAOoB,OAAQ,iBACvB,CAAEpB,KAAM,MAAOoB,OAAQ,uBACvB,CAAEpB,KAAM,MAAOoB,OAAQ,kBACvB,CAAEpB,KAAM,KAAMoB,OAAQ,kBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,kBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,gBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,eACtB,CAAEpB,KAAM,MAAOoB,OAAQ,oBACvB,CAAEpB,KAAM,IAAKoB,OAAQ,gBACrB,CAAEpB,KAAM,KAAMoB,OAAQ,sBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,iBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,kBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,mBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,mBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,gBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,oBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,mBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,kBACtB,CAAEpB,KAAM,KAAMoB,OAAQ,mBACtB,CAAEpB,KAAM,OAAQoB,OAAQ,kBACxB,CAAEpB,KAAM,MAAOoB,OAAQ,qBAGlB,IAAMC,EAAiB,qKAEjBC,EAAc,CACzB,CAAEC,MAAO,UAAWC,KAAM,KAAMC,MAAO,WACvC,CAAEF,MAAO,UAAWC,KAAM,KAAMC,MAAO,WACvC,CAAEF,MAAO,UAAWC,KAAM,KAAMC,MAAO,WACvC,CAAEF,MAAO,UAAWC,KAAM,KAAMC,MAAO,UAAWC,UAAU,GAC5D,CAAEH,MAAO,KAAMC,KAAM,MAAOC,MAAO,KAAMC,UAAU,GACnD,CAAEH,MAAO,MAAOC,KAAM,MAAOC,MAAO,OACpC,CAAEF,MAAO,QAASC,KAAM,OAAQC,MAAO,QAASC,UAAU,GAC1D,CAAEH,MAAO,MAAOC,KAAM,KAAMC,MAAO,OACnC,CAAEF,MAAO,MAAOC,KAAM,MAAOC,MAAO,OACpC,CAAEF,MAAO,KAAMC,KAAM,KAAMC,MAAO,Q","file":"js/Confirm.ab41951f.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./confirm.vue?vue&type=style&index=0&id=1d457884&scoped=true&lang=scss\"","<template>\r\n  <div class=\"confirm\">\r\n    <fx-card title=\"基础用法\">\r\n      <fx-button @click=\"baseConfirm\">点击确认弹窗</fx-button>\r\n      <template #hide>\r\n        <pre v-highlight=\"base\"><code></code></pre>\r\n      </template>\r\n    </fx-card>\r\n    <fx-card title=\"关闭前判断\">\r\n      <fx-button @click=\"beforeConfirm\">关闭前弹窗</fx-button>\r\n      <template #hide>\r\n        <pre v-highlight=\"before\"><code></code></pre>\r\n      </template>\r\n    </fx-card>\r\n    <fx-card title=\"自定义\">\r\n      <fx-button @click=\"optionBtnConfirm\">自定义按钮</fx-button>\r\n      <fx-button @click=\"optionCloseConfirm\">取消点击遮罩/Esc关闭</fx-button>\r\n      <template #hide>\r\n        <pre v-highlight=\"option\"><code></code></pre>\r\n      </template>\r\n    </fx-card>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { FxConfirm, FxMessage } from '@/base'\r\nimport { defaultContent } from '@/assets/menuList'\r\n\r\nconst test = (): Promise<number> => new Promise(resolve => setTimeout(() => resolve(Math.random()), 1000))\r\n\r\nexport default defineComponent({\r\n  name: 'viewConfirm',\r\n  setup () {\r\n    const baseConfirm = (): void => {\r\n      FxConfirm(defaultContent, '自定义标题').then(() => {\r\n        FxMessage.success('确定')\r\n      }).catch(() => {\r\n        FxMessage.warning('取消')\r\n      })\r\n    }\r\n    const beforeConfirm = (): void => {\r\n      FxConfirm({\r\n        content: defaultContent,\r\n        title: '自定义标题',\r\n        beforeClose: async (action, app, next) => {\r\n          FxMessage.success(`当前点击类型 ${action}`)\r\n          if (action === 'define') {\r\n            app.setDefineLoading(true)\r\n            const random = await test()\r\n            app.setDefineLoading(false)\r\n            if (random > 0.5) {\r\n              FxMessage.warning('提交失败!')\r\n            } else {\r\n              next()\r\n            }\r\n          } else if (action === 'cancel') {\r\n            app.setCancelLoading(true)\r\n            setTimeout(() => {\r\n              next()\r\n            }, 1000)\r\n          } else {\r\n            next()\r\n          }\r\n        }\r\n      }).then(() => {\r\n        FxMessage.success('确定')\r\n      }).catch(action => {\r\n        FxMessage.warning(action)\r\n      })\r\n    }\r\n    const optionBtnConfirm = (): void => {\r\n      FxConfirm({\r\n        content: '自定义内容',\r\n        title: '自定义标题',\r\n        cancelText: '错误',\r\n        defineText: '正确',\r\n        roundButton: true\r\n      }).then(() => {\r\n        FxMessage.success('确定')\r\n      }).catch(action => {\r\n        FxMessage.warning(action)\r\n      })\r\n    }\r\n    const optionCloseConfirm = (): void => {\r\n      FxConfirm({\r\n        content: '自定义内容',\r\n        title: '自定义标题',\r\n        closeOnEscape: false,\r\n        closeOnModal: false\r\n      }).then(() => {\r\n        FxMessage.success('确定')\r\n      }).catch(action => {\r\n        FxMessage.warning(action)\r\n      })\r\n    }\r\n\r\n    const base = `<fx-button @click=\"baseConfirm\">点击确认弹窗</fx-button>\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n      const baseConfirm = (): void => {\r\n        FxConfirm(defaultContent, '自定义标题').then(() => {\r\n          FxMessage('确定')\r\n        }).catch(() => {\r\n          FxMessage('取消')\r\n        })\r\n      }\r\n    }\r\n})`\r\n\r\n    const before = `<fx-button @click=\"beforeConfirm\">关闭前弹窗</fx-button>\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n      const test = (): Promise<number> => new Promise(resolve => setTimeout(() => resolve(Math.random()), 1000))\r\n      const beforeConfirm = (): void => {\r\n      FxConfirm({\r\n        content: defaultContent,\r\n        title: '自定义标题',\r\n        beforeClose: async (action, app, next) => {\r\n          FxMessage.success('当前点击类型' + action)\r\n          if (action === 'define') {\r\n            app.setDefineLoading(true)\r\n            const random = await test()\r\n            app.setDefineLoading(false)\r\n            if (random > 0.5) {\r\n              FxMessage.warning('提交失败!')\r\n            } else {\r\n              next()\r\n            }\r\n          } else if (action === 'cancel') {\r\n            app.setCancelLoading(true)\r\n            setTimeout(() => {\r\n              next()\r\n            }, 1000)\r\n          } else {\r\n            next()\r\n          }\r\n        }}).then(() => {\r\n          FxMessage.success('确定')\r\n        }).catch(action => {\r\n          FxMessage.warning(action)\r\n        })\r\n      }\r\n    }\r\n})`\r\n\r\n    const option = `<fx-button @click=\"optionBtnConfirm\">自定义按钮</fx-button>\r\n      <fx-button @click=\"optionCloseConfirm\">取消点击遮罩/Esc关闭</fx-button>\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n      const optionBtnConfirm = (): void => {\r\n        FxConfirm({\r\n          content: '自定义内容',\r\n          title: '自定义标题',\r\n          cancelText: '错误',\r\n          defineText: '正确',\r\n          roundButton: true\r\n        }).then(() => {\r\n          FxMessage.success('确定')\r\n        }).catch(action => {\r\n          FxMessage.warning(action)\r\n        })\r\n      }\r\n      const optionCloseConfirm = (): void => {\r\n        FxConfirm({\r\n          content: '自定义内容',\r\n          title: '自定义标题',\r\n          closeOnEscape: false,\r\n          closeOnModal: false\r\n        }).then(() => {\r\n          FxMessage.success('确定')\r\n        }).catch(action => {\r\n          FxMessage.warning(action)\r\n        })\r\n      }\r\n    }\r\n})`\r\n\r\n    return {\r\n      base,\r\n      before,\r\n      option,\r\n      beforeConfirm,\r\n      optionBtnConfirm,\r\n      optionCloseConfirm,\r\n      baseConfirm\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.confirm {\r\n}\r\n</style>\r\n","\r\nimport { defineComponent } from 'vue'\r\nimport { FxConfirm, FxMessage } from '@/base'\r\nimport { defaultContent } from '@/assets/menuList'\r\n\r\nconst test = (): Promise<number> => new Promise(resolve => setTimeout(() => resolve(Math.random()), 1000))\r\n\r\nexport default defineComponent({\r\n  name: 'viewConfirm',\r\n  setup () {\r\n    const baseConfirm = (): void => {\r\n      FxConfirm(defaultContent, '自定义标题').then(() => {\r\n        FxMessage.success('确定')\r\n      }).catch(() => {\r\n        FxMessage.warning('取消')\r\n      })\r\n    }\r\n    const beforeConfirm = (): void => {\r\n      FxConfirm({\r\n        content: defaultContent,\r\n        title: '自定义标题',\r\n        beforeClose: async (action, app, next) => {\r\n          FxMessage.success(`当前点击类型 ${action}`)\r\n          if (action === 'define') {\r\n            app.setDefineLoading(true)\r\n            const random = await test()\r\n            app.setDefineLoading(false)\r\n            if (random > 0.5) {\r\n              FxMessage.warning('提交失败!')\r\n            } else {\r\n              next()\r\n            }\r\n          } else if (action === 'cancel') {\r\n            app.setCancelLoading(true)\r\n            setTimeout(() => {\r\n              next()\r\n            }, 1000)\r\n          } else {\r\n            next()\r\n          }\r\n        }\r\n      }).then(() => {\r\n        FxMessage.success('确定')\r\n      }).catch(action => {\r\n        FxMessage.warning(action)\r\n      })\r\n    }\r\n    const optionBtnConfirm = (): void => {\r\n      FxConfirm({\r\n        content: '自定义内容',\r\n        title: '自定义标题',\r\n        cancelText: '错误',\r\n        defineText: '正确',\r\n        roundButton: true\r\n      }).then(() => {\r\n        FxMessage.success('确定')\r\n      }).catch(action => {\r\n        FxMessage.warning(action)\r\n      })\r\n    }\r\n    const optionCloseConfirm = (): void => {\r\n      FxConfirm({\r\n        content: '自定义内容',\r\n        title: '自定义标题',\r\n        closeOnEscape: false,\r\n        closeOnModal: false\r\n      }).then(() => {\r\n        FxMessage.success('确定')\r\n      }).catch(action => {\r\n        FxMessage.warning(action)\r\n      })\r\n    }\r\n\r\n    const base = `<fx-button @click=\"baseConfirm\">点击确认弹窗</fx-button>\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n      const baseConfirm = (): void => {\r\n        FxConfirm(defaultContent, '自定义标题').then(() => {\r\n          FxMessage('确定')\r\n        }).catch(() => {\r\n          FxMessage('取消')\r\n        })\r\n      }\r\n    }\r\n})`\r\n\r\n    const before = `<fx-button @click=\"beforeConfirm\">关闭前弹窗</fx-button>\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n      const test = (): Promise<number> => new Promise(resolve => setTimeout(() => resolve(Math.random()), 1000))\r\n      const beforeConfirm = (): void => {\r\n      FxConfirm({\r\n        content: defaultContent,\r\n        title: '自定义标题',\r\n        beforeClose: async (action, app, next) => {\r\n          FxMessage.success('当前点击类型' + action)\r\n          if (action === 'define') {\r\n            app.setDefineLoading(true)\r\n            const random = await test()\r\n            app.setDefineLoading(false)\r\n            if (random > 0.5) {\r\n              FxMessage.warning('提交失败!')\r\n            } else {\r\n              next()\r\n            }\r\n          } else if (action === 'cancel') {\r\n            app.setCancelLoading(true)\r\n            setTimeout(() => {\r\n              next()\r\n            }, 1000)\r\n          } else {\r\n            next()\r\n          }\r\n        }}).then(() => {\r\n          FxMessage.success('确定')\r\n        }).catch(action => {\r\n          FxMessage.warning(action)\r\n        })\r\n      }\r\n    }\r\n})`\r\n\r\n    const option = `<fx-button @click=\"optionBtnConfirm\">自定义按钮</fx-button>\r\n      <fx-button @click=\"optionCloseConfirm\">取消点击遮罩/Esc关闭</fx-button>\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n      const optionBtnConfirm = (): void => {\r\n        FxConfirm({\r\n          content: '自定义内容',\r\n          title: '自定义标题',\r\n          cancelText: '错误',\r\n          defineText: '正确',\r\n          roundButton: true\r\n        }).then(() => {\r\n          FxMessage.success('确定')\r\n        }).catch(action => {\r\n          FxMessage.warning(action)\r\n        })\r\n      }\r\n      const optionCloseConfirm = (): void => {\r\n        FxConfirm({\r\n          content: '自定义内容',\r\n          title: '自定义标题',\r\n          closeOnEscape: false,\r\n          closeOnModal: false\r\n        }).then(() => {\r\n          FxMessage.success('确定')\r\n        }).catch(action => {\r\n          FxMessage.warning(action)\r\n        })\r\n      }\r\n    }\r\n})`\r\n\r\n    return {\r\n      base,\r\n      before,\r\n      option,\r\n      beforeConfirm,\r\n      optionBtnConfirm,\r\n      optionCloseConfirm,\r\n      baseConfirm\r\n    }\r\n  }\r\n})\r\n","import { render } from \"./confirm.vue?vue&type=template&id=1d457884&scoped=true\"\nimport script from \"./confirm.vue?vue&type=script&lang=ts\"\nexport * from \"./confirm.vue?vue&type=script&lang=ts\"\n\nimport \"./confirm.vue?vue&type=style&index=0&id=1d457884&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-1d457884\"\n\nexport default script","/** 注释\r\n * @Name menuList;\r\n * @Author FiveXu\r\n * @Description menuList\r\n * @Date 2021-06-24 17:29\r\n */\r\nexport interface MenuListProps {\r\n  name: string;\r\n  router: string;\r\n}\r\n\r\nexport default [\r\n  { name: '按钮', router: '/layout/button' },\r\n  { name: '文字连接', router: '/layout/link' },\r\n  { name: '单选框', router: '/layout/radio' },\r\n  { name: '多选框', router: '/layout/checkbox' },\r\n  { name: '输入框', router: '/layout/input' },\r\n  { name: '计算器', router: '/layout/inputNumber' },\r\n  { name: '选择器', router: '/layout/select' },\r\n  { name: '开关', router: '/layout/switch' },\r\n  { name: '滑块', router: '/layout/slider' },\r\n  { name: '表单', router: '/layout/form' },\r\n  { name: '标签', router: '/layout/tag' },\r\n  { name: '进度条', router: '/layout/progress' },\r\n  { name: '树', router: '/layout/tree' },\r\n  { name: '分页', router: '/layout/pagination' },\r\n  { name: '标记', router: '/layout/badge' },\r\n  { name: '头像', router: '/layout/avatar' },\r\n  { name: '加载', router: '/layout/loading' },\r\n  { name: '提示', router: '/layout/tooltip' },\r\n  { name: '卡片', router: '/layout/card' },\r\n  { name: '下拉', router: '/layout/dropdown' },\r\n  { name: '消息', router: '/layout/message' },\r\n  { name: '通知', router: '/layout/notify' },\r\n  { name: '弹窗', router: '/layout/confirm' },\r\n  { name: '对话弹框', router: '/layout/dialog' },\r\n  { name: '轮播图', router: '/layout/carousel' }\r\n] as MenuListProps[]\r\n\r\nexport const defaultContent = 'Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。'\r\n\r\nexport const defaultList = [\r\n  { value: '蒙奇·D·路飞', role: '船长', label: '蒙奇·D·路飞' },\r\n  { value: '罗罗诺亚·索隆', role: '剑士', label: '罗罗诺亚·索隆' },\r\n  { value: '文斯莫克·山治', role: '厨师', label: '文斯莫克·山治' },\r\n  { value: '托尼托尼·乔巴', role: '医生', label: '托尼托尼·乔巴', disabled: true },\r\n  { value: '娜美', role: '航海士', label: '娜美', disabled: true },\r\n  { value: '乌索普', role: '狙击手', label: '乌索普' },\r\n  { value: '妮可·罗宾', role: '考古学家', label: '妮可·罗宾', disabled: true },\r\n  { value: '弗兰奇', role: '船匠', label: '弗兰奇' },\r\n  { value: '布鲁克', role: '音乐家', label: '布鲁克' },\r\n  { value: '甚平', role: '舵手', label: '甚平' }\r\n]\r\n"],"sourceRoot":""}